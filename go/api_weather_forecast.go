/*
 * webapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WeatherForecastApiController binds http requests to an api service and writes the service results to the http response
type WeatherForecastApiController struct {
	service WeatherForecastApiServicer
	errorHandler ErrorHandler
}

// WeatherForecastApiOption for how the controller is set up.
type WeatherForecastApiOption func(*WeatherForecastApiController)

// WithWeatherForecastApiErrorHandler inject ErrorHandler into controller
func WithWeatherForecastApiErrorHandler(h ErrorHandler) WeatherForecastApiOption {
	return func(c *WeatherForecastApiController) {
		c.errorHandler = h
	}
}

// NewWeatherForecastApiController creates a default api controller
func NewWeatherForecastApiController(s WeatherForecastApiServicer, opts ...WeatherForecastApiOption) Router {
	controller := &WeatherForecastApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the WeatherForecastApiController
func (c *WeatherForecastApiController) Routes() Routes {
	return Routes{ 
		{
			"GetWeatherForecast",
			strings.ToUpper("Get"),
			"/WeatherForecast",
			c.GetWeatherForecast,
		},
	}
}

// GetWeatherForecast - 
func (c *WeatherForecastApiController) GetWeatherForecast(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetWeatherForecast(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
